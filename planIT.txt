installing : express 

// Tip :
Using postman to simulate different requests 
--save-dev 

npm start  // "start" :"nodemon start"


/// package to log the requests of the client : morgan

const morgan = require('morgan'); // log the req to the console 


/// parse the request using the body-parser (supports JSON DATA , URLEncoded)


// cors : security mechanism that don't allow the client (browser) to acces 
resources from different server (origin) than the server that sent him the respone

/ append the response header to avoid cors erros
app.use((req,res,next)=>{
    // give acces to any client
   res.header('Access-Control-Allow-Origin','*');
   res.header('Access-Control-Allow-Header','Origin, X-Requested-With,Content-Type,Accept,Authorization');
   // browsers always send an Option req before sending post req or delete ,put 
   if(req.method === 'OPTIONS')
   {
       // all the req we wan want to support with our API
       res.header('Access-Control-Allow-Methods','PUT,DELETE,PATCH,GET,POST');
       // return bcz the Option req is just to find out the type of req
       return res.status(200).json({});

   }
   next();
})
 // but still we can acces with a tool like postman


 // mongodbA Atlas : mongo DB in the cloud

process.env.MONGO_ATLAS_PW  set the pwd on the server where we will depoloy the app

// mongoose works with Models and schemas

Product.find().where()


// to updata data 

[
    {
    	"propName":"price",
    	"value":"170"
    }

]


/// FOR THE Queries like finbyid()
you need to use .exec() function to get .then() and .catch 


// contrainte 
  store orders of products that don'y actually exist in the DB
{
    
    	"quantity": 2,
       "productId": "5e7bf9ec7097215f04e36a5b"

    }




///// populating Queries with mongoose
bringig the infos of a a row of another collection and insert it inside 
another row ---> relation between tables

instead of just having the id of a an object inside another object
we bring the whole object


/////////////// uploading images of our products:

Posting a product with an image : is binary image it can't be parsed by our body-parser

// CLASSIC approch : with our body-parser plug-in
we can pase the urlencoed(the url) and json objects(foming from a form for example)

// an alternative parser called multer 
"multer": "^1.4.2"  can handle formData like files ( upload an image )

///// 

http://localhost:3000/uploads/1585267076328-example.png  is not accebile 
because we don't set a route so this folder is not publicly accesible 

2 sol : -- set up a route /uploads 
or MAKE the folder upload publicly available app.static


///// AUThentification
install the packege to encrypt the pwd  (hashing library)
$ npm install bcrypt --save  
bcrypt.hash(pwd,salt)
salt means :
You can't reverse a hash / translate it to plain text value
hash : random string --> google it you may find a translation for the plaintext pwd 

bcz every plaintext string has his unique hashed version with the hashing algo using here 
--- Dictionary Tables : plainText Value -- hash Value
so if someone git the hashcode for a word 'icecream' easy pwd 
he still can access it from the DB 

Salting the pwd means adding random strings before hashing it -->
googling the hash won't lead to the plain textversion --> number of salting rounds

{
  _id: 5e7d53e8a04c81757849ddfd,
  email: 'othmanelgoubi@gmail.ma',
  password: '$2b$10$/cvLEx1ju7UAQNRwL0/96O95N1UldO1MpuZ8vw0GSeMFSc5Kzk4t6',
  __v: 0
}


// CHECK if the user exist before creating a new user 